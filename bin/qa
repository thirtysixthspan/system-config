#!/usr/bin/env ruby

require 'pp'
require 'yaml'
require 'fileutils'

module Coef

  def karma
    system('./node_modules/karma/bin/karma start spec/unit/config/karma_config.js --single-run')
  end

  def web
    system('foreman start -f ~/system-config/bin/Procfile.coef -d .')
  end

end


module D360

  def app_base
   '/Users/dparkhurst/dev/coef'
  end

  def core_repos_base
    "#{app_base}/d360api/repos"
  end

  def engine_repos_base
    "#{app_base}/d360/repos"
  end

  def doc_repos_base
    "#{app_base}/coef-doc-api/repos"
  end

  def repos
    [engine_repos_base, core_repos_base, doc_repos_base]
      .map { |base| Dir.glob("#{base}/*") }
      .flatten
      .reject { |dir| dir.match(/\/log/) }
      .select { |file| File.directory? file }
  end

  def shared_base
    "#{app_base}/d360/shared"
  end

  def dealer360_base
    "#{app_base}/d360/repos/dealer360"
  end

  def nsight_base
    "#{app_base}/d360/repos/d360-nsight"
  end

  def list_databases
    puts "Available dealer databases"
    puts `mysql -uroot -e 'show databases;' | grep dealer`
  end

  def switch_database(name)
    switch_d360_database(name)
    switch_d360_config(name)
    switch_d360api_database(name)
    switch_d360api_config(name)
  end

  def reset_test_database
    env_exec <<-EOS
      cd #{dealer360_base}
      RAILS_ENV=test bundle exec rake db:drop db:create
      bundle exec rake db:test:clone
    EOS
  end

  def logs
    env_system <<-EOC
      tail -f #{app_base}/d360/repos/dealer360/log/*.log #{app_base}/d360api/repos/d360-core-api/log/*.log
    EOC
  end

  def start
    start_d360
    start_core_api
    start_doc_api
    start_thinking_sphinx
  end

  def stop
    command = <<-EOC
      ps ax | grep '/rails server' | grep -v grep | awk '{ print $1 };'
    EOC
    servers = `#{command}`.split(/\n/)

    command = <<-EOC
      ps ax | grep 'searchd' | grep -v grep | awk '{ print $1 };'
    EOC
    servers += `#{command}`.split(/\n/)

    if servers.empty?
      puts "No servers running to kill"
      exit
    end
    servers.each do |server|
     ps_line = `ps x | grep -v grep | grep #{server.chomp}`
     puts "killing #{ps_line}"
     `kill -9 #{server.chomp}`
    end
  end

  def link_test_configuration_files
    repos = Dir.glob("#{engine_repos_base}/*")
      .select{ |repos| !repos.match(/dealer360/) }
      .select{ |repos| !repos.match(/d360-core-domain/) }
      .map{ |repo| repo.gsub(/^.*\//,'')}

    repos.each do |repo|
      puts "Linking files in #{repo}"
      [:database, :sphinx, :rollout].each do |file|
        existing = "#{shared_base}/#{file}.yml"
        link = "#{engine_repos_base}/#{repo}/spec/dummy/config/#{file}.yml"
        `rm -f #{link}`
        `ln -s #{existing} #{link}`
        cache = "#{engine_repos_base}/#{repo}/spec/dummy/tmp/cache"
        `mkdir -p #{cache}`
      end
    end
  end

  def bundle_install
    repos.each do |repo|
      puts "Updating bundle in #{repo}"
      env_system("cd #{repo}; bundle install")
    end
  end

  def git_develop
    repos.each do |repo|
      puts "Updating bundle in #{repo}"
      env_system("cd #{repo} && git checkout develop && git up")
    end
  end

  def update_gemfile
    original = Regexp.escape "gem 'rmagick', '~> 2.13.2'"
    replacement = Regexp.escape "gem 'rmagick', '~> 2.13.2', :require => false"
    env_system "sed -i.bak \"s/#{original}/#{replacement}/\" Gemfile"
  end

  def patch_thinking_sphinx
    env_exec "sed -i.bak 's/STDERR.puts.*ThinkingSphinx.*error.*$//' `bundle show thinking-sphinx`/lib/thinking_sphinx/context.rb"
  end

  def test
    update_gemfile
    commands = <<-EOC
      rm -f log/test.log
      rm -rf spec/reports/*
      rm -f spec/dummy/log/*
      rm -f ./../htmlreports/Rails_Best_Practices/spec/dummy/log/test.log
      rm -f ./../htmlreports/Rails_Best_Practices/test/dummy/log/test.log
      mkdir -p log
      rm -f log/test_setup.log
      RAILS_ENV=test bundle exec rake db:drop > log/test_setup.log
      RAILS_ENV=test bundle exec rake db:create >> log/test_setup.log
      RAILS_ENV=test bundle exec rake db:schema:load >> log/test_setup.log
      RAILS_ENV=test bundle exec rake db:migrate >> log/test_setup.log
      RAILS_ENV=test bundle exec rspec spec/ --format documentation
    EOC
    env_exec(commands)
  end

  def test_without_features
    commands = <<-EOC
      rm -f log/test.log
      rm -rf spec/reports/*
      rm -f spec/dummy/log/*
      rm -f ./../htmlreports/Rails_Best_Practices/spec/dummy/log/test.log
      rm -f ./../htmlreports/Rails_Best_Practices/test/dummy/log/test.log
      mkdir -p log
      rm -f log/test_setup.log
      RAILS_ENV=test bundle exec rake db:drop > log/test_setup.log
      RAILS_ENV=test bundle exec rake db:create >> log/test_setup.log
      RAILS_ENV=test bundle exec rake db:schema:load >> log/test_setup.log
      bundle exec rspec --format documentation `find spec | grep _spec.rb | grep -v features | xargs`
    EOC
    env_exec(commands)
  end


  def console
    env_exec <<-EOS
      cd #{dealer360_base}
      RAILS_ENV=test bundle exec rails console
    EOS
  end

  def fetch_config(host)
    fetch_star_schema(host)
    fetch_application_yml(host)
  end

  def fetch_star_schema(host)
    env_system("scp #{host}:/www/d360api/current/config/star_schema.xml .")
  end
  def fetch_application_yml(host)
    env_system("scp #{host}:/www/d360api/current/config/application.yml .")
    puts "you must update integrations to development in application.yaml"
  end

  private

  def start_d360
    env_system <<-EOC
      cd #{app_base}/d360/repos/dealer360
      rm -rf tmp/cache/* tmp/cache_core_domain/*
      bundle exec rails server &
    EOC
  end

  def start_core_api
    env_system <<-EOC
      cd #{app_base}/d360api/repos/d360-core-api
      rm -rf tmp/cache/*
      bundle exec rails server -p 3001 &
    EOC
  end

  def start_doc_api
    env_system <<-EOC
      cd #{app_base}/coef-doc-api/repos/coef-document-api
      rm -rf tmp/cache/*
      bundle exec rails server -p 3002 &
    EOC
  end

  def start_thinking_sphinx
    env_system <<-EOC
      cd #{app_base}/d360/repos/dealer360
      bundle exec rake ts:start
    EOC
  end


  def download_d360_configs
    puts "Downloading d360 config files"

    environments = {
      nmac: 'nmac-dev-nightly',
      nna: 'd360-dev-nightly',
      nci: 'd360-dev-nci'
    }
    configs = ['application.yml']

    configs.each do |file|
      environments.each do |env, server|
        puts "Downloading #{file} in #{env} from #{server}"

        local = "#{app_base}/d360/repos/dealer360/config/#{file}"
        remote = "/www/d360/shared/#{file}"
        `scp #{server}:#{remote} #{local}.#{env}`
      end
    end
  end

  def download_d360api_configs
    puts "Downloading d360 config files"

    environments = {
      nmac: 'nmac-dev-nightly',
      nna: 'd360-dev-nightly',
      nci: 'd360-dev-nci'
    }
    configs = ['application.yml', 'star_schema.xml']

    configs.each do |file|
      environments.each do |env, server|
        puts "Downloading #{file} in #{env} from #{server}"

        local = "#{app_base}/d360api/repos/d360-core-api/config/#{file}"
        remote = "/www/d360api/shared/#{file}"
        `scp #{server}:#{remote} #{local}.#{env}`
      end
    end
  end

  def switch_d360_config(name)
    env_config_file = "#{app_base}/d360/shared/application.yml.#{name}"
    config_file = "#{app_base}/d360/shared/application.yml"

    puts "Switching d360 development config from #{env_config_file}"
    FileUtils.cp(env_config_file, config_file)
  end

  def switch_d360_config(name)
    dir = "#{app_base}/d360/repos/dealer360/config"
    files = ['application.yml']
    files.each do |file|
      env_config_file = "#{dir}/#{file}.#{name}"
      config_file = "#{dir}/#{file}"
      puts "Using d360 config: #{env_config_file}"
      FileUtils.cp(env_config_file, config_file)
    end
  end

  def switch_d360_database(name)
    database_file = "#{app_base}/d360/shared/database.yml"
    database_config = YAML.load(File.open(database_file))
    database = database_config['development']['database']
    database_name = "dealer360_#{name}"

    puts "Switching d360 development database from #{database} to #{database_name}"

    database_config['development']['database'] = database_name
    File.open(database_file, 'w') do |file|
      file.write database_config.to_yaml
    end
  end

  def switch_d360api_config(name)
    dir = "#{app_base}/d360api/repos/d360-core-api/config"
    files = ['application.yml', 'star_schema.xml']
    files.each do |file|
      env_config_file = "#{dir}/#{file}.#{name}"
      config_file = "#{dir}/#{file}"
      puts "Using d360api config: #{env_config_file}"
      FileUtils.cp(env_config_file, config_file)
    end
  end

  def switch_d360api_database(name)
    database_file = "#{app_base}/d360api/shared/database.yml"
    database_config = YAML.load(File.open(database_file))
    database = database_config['development']['database']
    database_name = "dealer360_#{name}"

    puts "Switching d360api development database from #{database} to #{database_name}"

    database_config['development']['database'] = database_name
    File.open(database_file, 'w') do |file|
      file.write database_config.to_yaml
    end
  end


  # def method_lengths
  #   nsight = [Nsight::Engine, Nsight::ConvertDashboard, Nsight::UpdateDashboard,
  #     Nsight::CreateSection, Nsight::DeleteSection, Nsight::MoveSection,
  #     Nsight::CreatePage, Nsight::CreateDashboard, Nsight::LoadTiles,
  #     Nsight::RetrieveDashboardSections, Nsight::LoadTile, Nsight::Dashboard,
  #     Nsight::ApiResource, Nsight::DataPoint, Nsight::DataPointDefinition, Nsight::Tile]

  #   puts
  #   nsight.each do |source|
  #     sizes = source.instance_methods(false).map{ |m| source.instance_method(m) }.map{ |m| m.source.split("\n").size }
  #     puts "#{source} Avg:#{sizes.mean} Max:#{sizes.max}"
  #   end
  # end

end


module Nsight

  def app_base
   '/Users/dparkhurst/dev/coef'
  end

  def nsight_base
    "#{app_base}/d360/repos/d360-nsight"
  end

  def warmup
    env_exec <<-EOS
      cd #{nsight_base}
      bundle exec rake nsight:warmup_api[7,1]
    EOS
  end

end

class QA

  def initialize
    @env= <<-SHELL

    SHELL
  end

  def mysql_databases
    puts mysql("show databases;")
  end

  def mysql_create_database(db)
    puts mysql("create database #{db};")
  end

  def mysql_delete_database(db)
    puts mysql("drop database if exists #{db};")
  end

  def memcache_clear
    env_exec <<-SHELL
      echo 'flush_all' | nc localhost 11211
    SHELL
  end

  def memcache_keys
    slabs = `echo 'stats items' | nc 127.0.0.1 11211 - | awk -F  ":" '{ print $2 }'`.split.uniq
    slabs.each do |slab|
      system("echo 'stats cachedump #{slab} 10000' | nc 127.0.0.1 11211 - ")
    end
  end

  def memcache_key(key)
    system("echo 'get #{key}' | nc 127.0.0.1 11211 - ")
  end

  def memcache_delete_key(key)
    system("echo 'delete #{key}' | nc 127.0.0.1 11211 - ")
  end

  def ruby_analyze(path)
    puts "Running Reek Gem on #{path}"
    env_system("reek #{path}")
    puts "\n\n"
    puts "Running Flog Gem on #{path}"
    env_system("flog #{path}")
  end

  def git_blame_history(sha, line, file)
    attributes = [sha]
    loop do
      break unless attributes && attributes.first && attributes.first.size > 5
      blame = `git blame #{attributes.first}^ -- #{file} | grep '#{line}'`.chomp
      puts blame
      attributes = blame.split(/\s/)
    end
  end

  private


  def mysql(sql)
    `mysql -uroot -e "#{sql}"`
  end

  def env_exec(command)
    puts "Runnining Commands:"
    puts command
    exec(@env+command)
  end

  def env_system(command)
    puts "Runnining Commands:"
    puts command
    system(@env+command)
  end

  def silent_env_exec(command)
    exec(@env+command)
  end

  def git_repository_root_dir
    `git rev-parse --show-toplevel`.chomp
  end

end

MODULES = ['d360','nsight','coef']

ARGV.each do |arg|
  if MODULES.include?(arg)
    $active_module = arg.capitalize
    puts "Task module #{$active_module}"
    ARGV.shift
    break
  end
end

if ARGV.empty?
  puts "QA [command]"
  exit
end

qa = QA.new
qa.extend(Kernel.const_get($active_module))
qa.send(*ARGV)
